# -*- coding: utf-8 -*-
"""Main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YhgWw9_SzbffFIicyPsh1kbi1zPoq2Kn
"""

!pip install firebase-admin --quiet

import firebase_admin
from firebase_admin import credentials, firestore
from datetime import datetime
import uuid

cred = credentials.Certificate('/content/task-manager-455907-07638de5e15f.json')
firebase_admin.initialize_app(cred)
db = firestore.client()

def register_user(user_id, email):
    """Create a user document if not exists"""
    user_ref = db.collection('users').document(user_id)
    if not user_ref.get().exists:
        user_ref.set({
            'email': email,
            'taskboards': []
        })
        print(f"User {email} registered.")
    else:
        print("User already exists.")

def create_taskboard(creator_id, board_name):
    """Create a new task board"""
    board_id = str(uuid.uuid4())
    board_ref = db.collection('taskboards').document(board_id)
    board_ref.set({
        'name': board_name,
        'creator_id': creator_id,
        'members': [creator_id],
        'tasks': []
    })
    user_ref = db.collection('users').document(creator_id)
    user_ref.update({'taskboards': firestore.ArrayUnion([board_id])})
    print(f"Taskboard '{board_name}' created with ID: {board_id}")
    return board_id

def rename_taskboard(creator_id, board_id, new_name):
    board_ref = db.collection('taskboards').document(board_id)
    board = board_ref.get().to_dict()
    if board and board['creator_id'] == creator_id:
        board_ref.update({'name': new_name})
        print("Board renamed successfully.")
    else:
        print("Unauthorized: Only creator can rename the board.")

def delete_taskboard(creator_id, board_id):
    board_ref = db.collection('taskboards').document(board_id)
    board = board_ref.get().to_dict()

    if not board:
        print("Board not found.")
        return

    if board['creator_id'] != creator_id:
        print("Only creator can delete the board.")
        return

    if len(board['members']) > 1 or len(board['tasks']) > 0:
        print("Cannot delete board: tasks or non-owning users still present.")
        return

    board_ref.delete()
    print("Board deleted.")

def add_user_to_board(creator_id, board_id, new_user_id):
    board_ref = db.collection('taskboards').document(board_id)
    board = board_ref.get().to_dict()

    if board['creator_id'] != creator_id:
        print("Only creator can add users.")
        return

    board_ref.update({'members': firestore.ArrayUnion([new_user_id])})
    db.collection('users').document(new_user_id).update({
        'taskboards': firestore.ArrayUnion([board_id])
    })
    print(f"User {new_user_id} added to board.")

def remove_user_from_board(creator_id, board_id, user_id):
    board_ref = db.collection('taskboards').document(board_id)
    board = board_ref.get().to_dict()

    if board['creator_id'] != creator_id:
        print("Only creator can remove users.")
        return

    board_ref.update({'members': firestore.ArrayRemove([user_id])})
    db.collection('users').document(user_id).update({
        'taskboards': firestore.ArrayRemove([board_id])
    })

    # Mark tasks as unassigned
    for task_id in board['tasks']:
        task_ref = db.collection('tasks').document(task_id)
        task = task_ref.get().to_dict()
        if task and user_id in task['assignees']:
            task_ref.update({
                'assignees': firestore.ArrayRemove([user_id]),
                'highlight': 'red'
            })
    print(f"User {user_id} removed and tasks unassigned.")

def add_task(board_id, title, due_date, assignees=[]):
    task_id = str(uuid.uuid4())
    task_ref = db.collection('tasks').document(task_id)
    task_ref.set({
        'board_id': board_id,
        'title': title,
        'due_date': due_date,
        'completed': False,
        'completion_date': None,
        'assignees': assignees,
        'highlight': None
    })
    db.collection('taskboards').document(board_id).update({
        'tasks': firestore.ArrayUnion([task_id])
    })
    print(f"Task '{title}' created.")

def complete_task(task_id):
    task_ref = db.collection('tasks').document(task_id)
    task_ref.update({
        'completed': True,
        'completion_date': datetime.utcnow().isoformat()
    })
    print("Task marked as complete.")

def edit_task(task_id, new_title=None, new_due_date=None, new_assignees=None):
    task_ref = db.collection('tasks').document(task_id)
    updates = {}
    if new_title:
        updates['title'] = new_title
    if new_due_date:
        updates['due_date'] = new_due_date
    if new_assignees is not None:
        updates['assignees'] = new_assignees
        updates['highlight'] = None  # Remove red highlight
    task_ref.update(updates)
    print("Task updated.")

def delete_task(board_id, task_id):
    db.collection('tasks').document(task_id).delete()
    db.collection('taskboards').document(board_id).update({
        'tasks': firestore.ArrayRemove([task_id])
    })
    print("Task deleted.")

def task_counters(board_id):
    board = db.collection('taskboards').document(board_id).get().to_dict()
    active = complete = 0
    for task_id in board['tasks']:
        task = db.collection('tasks').document(task_id).get().to_dict()
        if task:
            if task['completed']:
                complete += 1
            else:
                active += 1
    print(f"Total: {len(board['tasks'])}, Active: {active}, Completed: {complete}")

def show_boards(user_id):
    user = db.collection('users').document(user_id).get().to_dict()
    print(f"\nTask Boards for user {user_id}:")
    for board_id in user.get('taskboards', []):
        board = db.collection('taskboards').document(board_id).get().to_dict()
        marker = "(Creator)" if board['creator_id'] == user_id else ""
        print(f"- {board['name']} {marker}")

# Register users
register_user('uid1', 'alice@example.com')
register_user('uid2', 'bob@example.com')

# Create board
board_id = create_taskboard('uid1', 'Project Alpha')

# Add user to board
add_user_to_board('uid1', board_id, 'uid2')

# Add task
add_task(board_id, "Design Logo", "2025-04-10", assignees=['uid2'])

# Edit task, mark complete
# Complete & update counters
task_counters(board_id)